{"ast":null,"code":"import _slicedToArray from \"/Users/slicknick/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/slicknick/Development/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport default function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // create a state object for our inputs\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  var initialValues = Object.values(initial).join('');\n  useEffect(function () {\n    // This function runs when the things we are watching change\n    setInputs(initial);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name,\n        type = _e$target.type;\n    if (type === 'number') value = parseInt(value); // if working with files, must set first item of array to be files\n    // that's how file uploads work\n\n    if (type === 'file') value[0] = e.target.files;\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    // create  array, map over array to set keys to zero, then feed\n    // that to Object.fromEntries to turn it back into array\n    var blankState = Object.fromEntries(Object.entries(inputs).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return [key, ''];\n    }));\n    setInputs(blankState);\n  } // return info we want surfaced from this custom hook\n  // (necessary to return)\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    clearForm: clearForm\n  };\n}\n\n_s(useForm, \"Ojj4hh6HHOsjtwWnkUaVb5V0o3U=\");","map":{"version":3,"sources":["/Users/slicknick/Development/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","initialValues","Object","values","join","useEffect","handleChange","e","target","value","name","type","parseInt","files","resetForm","clearForm","blankState","fromEntries","entries","map","key"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,GAA+B;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC5C;AAD4C,kBAEhBF,QAAQ,CAACE,OAAD,CAFQ;AAAA,MAErCC,MAFqC;AAAA,MAE7BC,SAF6B;;AAG5C,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAtB;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd;AACAL,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAHQ,EAGN,CAACG,aAAD,CAHM,CAAT;;AAKA,WAASK,YAAT,CAAsBC,CAAtB,EAAyB;AAAA,oBACKA,CAAC,CAACC,MADP;AAAA,QACjBC,KADiB,aACjBA,KADiB;AAAA,QACVC,IADU,aACVA,IADU;AAAA,QACJC,IADI,aACJA,IADI;AAEvB,QAAIA,IAAI,KAAK,QAAb,EAAuBF,KAAK,GAAGG,QAAQ,CAACH,KAAD,CAAhB,CAFA,CAGvB;AACA;;AACA,QAAIE,IAAI,KAAK,MAAb,EAAqBF,KAAK,CAAC,CAAD,CAAL,GAAWF,CAAC,CAACC,MAAF,CAASK,KAApB;AACrBb,IAAAA,SAAS,iCAEJD,MAFI,2BAGNW,IAHM,EAGCD,KAHD,GAAT;AAKD;;AAED,WAASK,SAAT,GAAqB;AACnBd,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AAED,WAASiB,SAAT,GAAqB;AACnB;AACA;AACA,QAAMC,UAAU,GAAGd,MAAM,CAACe,WAAP,CACjBf,MAAM,CAACgB,OAAP,CAAenB,MAAf,EAAuBoB,GAAvB,CAA2B;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOX,KAAP;;AAAA,aAAkB,CAACW,GAAD,EAAM,EAAN,CAAlB;AAAA,KAA3B,CADiB,CAAnB;AAGApB,IAAAA,SAAS,CAACgB,UAAD,CAAT;AACD,GAlC2C,CAoC5C;AACA;;;AACA,SAAO;AACLjB,IAAAA,MAAM,EAANA,MADK;AAELO,IAAAA,YAAY,EAAZA,YAFK;AAGLQ,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,SAAS,EAATA;AAJK,GAAP;AAMD;;GA5CuBlB,O","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const [inputs, setInputs] = useState(initial);\n  const initialValues = Object.values(initial).join('');\n\n  useEffect(() => {\n    // This function runs when the things we are watching change\n    setInputs(initial);\n  }, [initialValues]);\n\n  function handleChange(e) {\n    let { value, name, type } = e.target;\n    if (type === 'number') value = parseInt(value);\n    // if working with files, must set first item of array to be files\n    // that's how file uploads work\n    if (type === 'file') value[0] = e.target.files;\n    setInputs({\n      // copy existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    // create  array, map over array to set keys to zero, then feed\n    // that to Object.fromEntries to turn it back into array\n    const blankState = Object.fromEntries(\n      Object.entries(inputs).map(([key, value]) => [key, ''])\n    );\n    setInputs(blankState);\n  }\n\n  // return info we want surfaced from this custom hook\n  // (necessary to return)\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}