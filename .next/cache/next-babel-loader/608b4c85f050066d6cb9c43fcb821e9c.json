{"ast":null,"code":"import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\nfunction createClient(_ref) {\n  var headers = _ref.headers,\n      initialState = _ref.initialState;\n  return new ApolloClient({\n    // Error handling link that takes in two different types of errors\n    link: ApolloLink.from([onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.forEach(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError, \". Backend is unreachable. Is it running?\"));\n    }), // this uses apollo-link-http under the hood, so all the options here come from that package\n    createUploadLink({\n      uri: true ? endpoint : prodEndpoint,\n      fetchOptions: {\n        // should cookies go along for this ride?\n        // yes because we need to know what privileges the logged in user has \n        credentials: 'include'\n      },\n      // pass the headers along from this request. This enables server side rendering w/ a logged in state\n      headers: headers\n    })]),\n    cache: new InMemoryCache({\n      // aka in the browser\n      typePolicies: {\n        Query: {\n          fields: {// TODO: We will add this together!\n            // allProducts: paginationField(),\n          }\n        }\n      }\n    }).restore(initialState || {})\n  });\n} // crawl all pages and compononents for any queries (for products, etc)\n// and will make sure all that data is fetched before the server sends the HTML to client\n\n\nexport default withApollo(createClient, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["/Users/slicknick/Development/Advanced-React/sick-fits/frontend/lib/withData.js"],"names":["ApolloClient","ApolloLink","InMemoryCache","onError","getDataFromTree","createUploadLink","withApollo","endpoint","prodEndpoint","createClient","headers","initialState","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","fetchOptions","credentials","cache","typePolicies","Query","fields","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;;AAEA,SAASC,YAAT,OAAiD;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AAC/C,SAAO,IAAIX,YAAJ,CAAiB;AACtB;AACAY,IAAAA,IAAI,EAAEX,UAAU,CAACY,IAAX,CAAgB,CACpBV,OAAO,CAAC,iBAAqC;AAAA,UAAlCW,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,SAAZ,SAAYA,SAAZ;AAAA,YAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,eACpBC,OAAO,CAACC,GAAR,qCAC+BJ,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADoB;AAAA,OAAtB;AAKF,UAAIJ,YAAJ,EACEK,OAAO,CAACC,GAAR,4BACsBN,YADtB;AAGH,KAXM,CADa,EAapB;AACAV,IAAAA,gBAAgB,CAAC;AACfiB,MAAAA,GAAG,EAAE,OAAyCf,QAAzC,GAAoDC,YAD1C;AAEfe,MAAAA,YAAY,EAAE;AACZ;AACA;AACAC,QAAAA,WAAW,EAAE;AAHD,OAFC;AAOf;AACAd,MAAAA,OAAO,EAAPA;AARe,KAAD,CAdI,CAAhB,CAFgB;AA2BtBe,IAAAA,KAAK,EAAE,IAAIvB,aAAJ,CAAkB;AAAE;AACzBwB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,CACN;AACA;AAFM;AADH;AADK;AADS,KAAlB,EASJC,OATI,CASIlB,YAAY,IAAI,EATpB;AA3Be,GAAjB,CAAP;AAsCD,C,CACD;AACA;;;AACA,eAAeL,UAAU,CAACG,YAAD,EAAe;AAAEL,EAAAA,eAAe,EAAfA;AAAF,CAAf,CAAzB","sourcesContent":["import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\nfunction createClient({ headers, initialState }) {\n  return new ApolloClient({\n    // Error handling link that takes in two different types of errors\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors)\n          graphQLErrors.forEach(({ message, locations, path }) =>\n            console.log(\n              `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n            )\n          );\n        if (networkError)\n          console.log(\n            `[Network error]: ${networkError}. Backend is unreachable. Is it running?`\n          );\n      }),\n      // this uses apollo-link-http under the hood, so all the options here come from that package\n      createUploadLink({\n        uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n        fetchOptions: {\n          // should cookies go along for this ride?\n          // yes because we need to know what privileges the logged in user has \n          credentials: 'include',\n        },\n        // pass the headers along from this request. This enables server side rendering w/ a logged in state\n        headers,\n      }),\n    ]),\n    cache: new InMemoryCache({ // aka in the browser\n      typePolicies: {\n        Query: {\n          fields: {\n            // TODO: We will add this together!\n            // allProducts: paginationField(),\n          },\n        },\n      },\n    }).restore(initialState || {}),\n  });\n}\n// crawl all pages and compononents for any queries (for products, etc)\n// and will make sure all that data is fetched before the server sends the HTML to client\nexport default withApollo(createClient, { getDataFromTree });\n"]},"metadata":{},"sourceType":"module"}