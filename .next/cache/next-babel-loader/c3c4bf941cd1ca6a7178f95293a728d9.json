{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n    if (type === 'number') value = parseInt(value); // if working with files, must set first item of array to be files\n    // that's how file uploads work\n\n    if (type === 'file') value[0] = e.target.files;\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.entries(inputs.map(([key, value]) => [key, '']));\n  } // return info we want surfaced from this custom hook\n  // (necessary to return)\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["/Users/slicknick/Development/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","Object","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;AACA,QAAID,IAAI,KAAK,QAAb,EAAuBF,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB,CAFA,CAGvB;AACA;;AACA,QAAIE,IAAI,KAAK,MAAb,EAAqBF,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASE,KAApB;AACrBR,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACK,IAAD,GAAQD;AAHD,OAAT;AAKD;;AAED,WAASM,SAAT,GAAqB;AACnBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AAED,WAASY,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAed,MAAM,CAACe,GAAP,CAAW,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,CAACY,GAAD,EAAM,EAAN,CAA7B,CAAf,CAAnB;AACD,GAvB2C,CAyB5C;AACA;;;AACA,SAAO;AACLhB,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e) {\n    let { value, name, type } = e.target;\n    if (type === 'number') value = parseInt(value);\n    // if working with files, must set first item of array to be files\n    // that's how file uploads work\n    if (type === 'file') value[0] = e.target.files;\n    setInputs({\n      // copy existing state\n      ...inputs,\n      [name]: value,\n    });\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.entries(inputs.map(([key, value]) => [key, '']));\n  }\n\n  // return info we want surfaced from this custom hook\n  // (necessary to return)\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}